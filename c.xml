<?xml version="1.0"?>
<!DOCTYPE issues [
<!ELEMENT issues (issue*)>
<!ATTLIST issues burpVersion CDATA "">
<!ATTLIST issues exportTime CDATA "">
<!ELEMENT issue (serialNumber, type, name, host, path, location, severity, confidence, issueBackground?, remediationBackground?, references?, vulnerabilityClassifications?, issueDetail?, issueDetailItems?, remediationDetail?, requestresponse*, collaboratorEvent*, infiltratorEvent*, staticAnalysis*, dynamicAnalysis*)>
<!ELEMENT serialNumber (#PCDATA)>
<!ELEMENT type (#PCDATA)>
<!ELEMENT name (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT path (#PCDATA)>
<!ELEMENT location (#PCDATA)>
<!ELEMENT severity (#PCDATA)>
<!ELEMENT confidence (#PCDATA)>
<!ELEMENT issueBackground (#PCDATA)>
<!ELEMENT remediationBackground (#PCDATA)>
<!ELEMENT references (#PCDATA)>
<!ELEMENT vulnerabilityClassifications (#PCDATA)>
<!ELEMENT issueDetail (#PCDATA)>
<!ELEMENT issueDetailItems (issueDetailItem*)>
<!ELEMENT issueDetailItem (#PCDATA)>
<!ELEMENT remediationDetail (#PCDATA)>
<!ELEMENT requestresponse (request?, response?, responseRedirected?)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request method CDATA "">
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT responseRedirected (#PCDATA)>
<!ELEMENT sender (#PCDATA)>
<!ELEMENT message (#PCDATA)>
<!ELEMENT conversation (#PCDATA)>
<!ELEMENT recipient (#PCDATA)>
<!ELEMENT recipients (recipient*)>
<!ELEMENT smtp (sender, recipients, message, conversation)>
<!ELEMENT collaboratorEvent (interactionType, originIp, time, lookupType?, lookupHost?, requestresponse?, smtp?)>
<!ELEMENT interactionType (#PCDATA)>
<!ELEMENT originIp (#PCDATA)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT lookupType (#PCDATA)>
<!ELEMENT lookupHost (#PCDATA)>
<!ELEMENT infiltratorEvent (parameterName, platform, signature, stackTrace?, parameterValue?, collaboratorEvent)>
<!ELEMENT parameterName (#PCDATA)>
<!ELEMENT platform (#PCDATA)>
<!ELEMENT signature (#PCDATA)>
<!ELEMENT stackTrace (#PCDATA)>
<!ELEMENT parameterValue (#PCDATA)>
<!ELEMENT dynamicAnalysis (source, sink, sourceStackTrace, sinkStackTrace, eventListenerStackTrace, sourceValue, sinkValue, eventHandlerData, eventHandlerDataType, eventHandlerManipulatedData, poc, origin, isOriginChecked, sourceElementId, sourceElementName, eventFiredEventName, eventFiredElementId, eventFiredElementName, eventFiredOuterHtml)>
<!ELEMENT staticAnalysis (source, sink, codeSnippets)>
<!ELEMENT source (#PCDATA)>
<!ELEMENT sink (#PCDATA)>
<!ELEMENT sourceStackTrace (#PCDATA)>
<!ELEMENT sinkStackTrace (#PCDATA)>
<!ELEMENT eventListenerStackTrace (#PCDATA)>
<!ELEMENT sourceValue (#PCDATA)>
<!ELEMENT sinkValue (#PCDATA)>
<!ELEMENT eventHandlerData (#PCDATA)>
<!ELEMENT eventHandlerDataType (#PCDATA)>
<!ELEMENT sourceElementId (#PCDATA)>
<!ELEMENT sourceElementName (#PCDATA)>
<!ELEMENT eventFiredEventName (#PCDATA)>
<!ELEMENT eventFiredElementId (#PCDATA)>
<!ELEMENT eventFiredElementName (#PCDATA)>
<!ELEMENT eventFiredOuterHtml (#PCDATA)>
<!ELEMENT eventHandlerManipulatedData (#PCDATA)>
<!ELEMENT poc (#PCDATA)>
<!ELEMENT origin (#PCDATA)>
<!ELEMENT isOriginChecked (#PCDATA)>
<!ELEMENT codeSnippets (codeSnippet*)>
<!ELEMENT codeSnippet (#PCDATA)>
]>
<issues burpVersion="2020.9" exportTime="Wed Nov 25 13:42:15 CET 2020">
  <issue>
    <serialNumber>540756379260926976</serialNumber>
    <type>16777984</type>
    <name><![CDATA[Strict transport security not enforced]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Low</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p> The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. </p>
<p>
To exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.</p>
<p>Note that because HSTS is a &quot;trust on first use&quot; (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.</p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security">HTTP Strict Transport Security</a></li>
<li><a href="http://www.thoughtcrime.org/software/sslstrip/">sslstrip</a></li>
<li><a href="https://hstspreload.appspot.com/">HSTS Preload Form</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/523.html">CWE-523: Unprotected Transport of Credentials</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[This issue was found in multiple locations under the reported path.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24vYXNzaWduIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2Fzc2lnbg0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNDAyMzIzMjgyM2I2NzNmMmE1Mzc2ZmY3NDU4YjMwNjINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo1MSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTg0DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbjsKd2luZG93LmxvY2F0aW9uLmFzc2lnbihwYXlsb2FkKTsKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5999202350711429120</serialNumber>
    <type>16777472</type>
    <name><![CDATA[TLS certificate]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/]]></path>
    <location><![CDATA[/]]></location>
    <severity>Medium</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.</p>
<p>It should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. </p>]]></issueBackground>
    <references><![CDATA[<ul><li><a href="https://wiki.mozilla.org/Security/Server_Side_TLS">SSL/TLS Configuration Guide</a></li></ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The following problem was identified with the server's TLS certificate:<ul><li>The server's certificate is not trusted.</li></ul><b>Note:</b> Burp relies on the Java trust store to determine whether certificates are trusted. The Java trust store does not include every root CA certificate that is included within browser trust stores. Burp might incorrectly report that a certificate is not trusted, if a valid root CA certificate is being used that is not included in the Java trust store.<br><br>The server presented the following certificates:<br><br><h4>Server certificate</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>public-firing-range.appspot.com</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>PortSwigger CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Wed Nov 11 12:05:49 CET 2020</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Thu Nov 11 12:05:49 CET 2021</td></tr></table><h4>Certificate chain #1</h4><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>PortSwigger CA</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>PortSwigger CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Sun Aug 17 12:31:59 CEST 2014</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Sat Aug 17 12:31:59 CEST 2030</td></tr></table>]]></issueDetail>
  </issue>
  <issue>
    <serialNumber>2055494963921041408</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/URL/documentwrite]]></path>
    <location><![CDATA[/address/URL/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.URL</b> and passed to <b>document.write</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvVVJML2RvY3VtZW50d3JpdGUgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogMDg4MmE5ZTU1MjA0YmFiYzFlM2VmZmMyYWM1MzhjOGUNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNzoxNSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTczDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IGRvY3VtZW50LlVSTDsKZG9jdW1lbnQud3JpdGUocGF5bG9hZCk7CgogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>document.URL</source>
      <sink>document.write</sink>
      <sourceStackTrace>at Object.raiUj (&lt;anonymous&gt;:1:336277)
at Object.UltTL (&lt;anonymous&gt;:1:753808)
at HTMLDocument.get [as URL] (&lt;anonymous&gt;:1:756007)
at http://public-firing-range.appspot.com/address/URL/documentwrite:5:30</sourceStackTrace>
      <sinkStackTrace>at Object.FnhFr (&lt;anonymous&gt;:1:854428)
at HTMLDocument.write (&lt;anonymous&gt;:1:855304)
at http://public-firing-range.appspot.com/address/URL/documentwrite:6:10</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/URL/documentwrite?m89kfylvog=m89kfylvog%27%22`&apos;&quot;/m89kfylvog/&gt;&lt;m89kfylvog/\&gt;edrb45fspy&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/URL/documentwrite?m89kfylvog=m89kfylvog%27%22`&apos;&quot;/m89kfylvog/&gt;&lt;m89kfylvog/\&gt;edrb45fspy&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/URL/documentwrite?&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>590039869695165440</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/URL/documentwrite]]></path>
    <location><![CDATA[/address/URL/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL1VSTC9kb2N1bWVudHdyaXRlPzV6dFU9MzQyNzAzOTAzIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAzMQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQo0OXlxbz14Jmtvcmd2PXgNCjENCloNClENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA4MzEyY2ZmOTk3OWRmOTliN2ZhOWFkZWNiZGMzZDE1Ng0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjE4OjQ5IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL1VSTC9kb2N1bWVudHdyaXRlP3hwRFI9MjA5OTU0NzIyOCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KeTFqNDg9eCYxcm0xej14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4109828013890286592</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/URLUnencoded/documentwrite]]></path>
    <location><![CDATA[/address/URLUnencoded/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL1VSTFVuZW5jb2RlZC9kb2N1bWVudHdyaXRlP2o1U0o9MTI3MjEyOTUyMCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KdGdkb289eCZnZ3dqcj14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiAzZTVmMDdiMGI0ZGU3M2FhODgxMWE1MmFmMDNjNGQ5OQ0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjU5OjUxIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL1VSTFVuZW5jb2RlZC9kb2N1bWVudHdyaXRlP1h2bjY9Nzk3ODk4ODIxIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQp3MmgybT14JnpueTBnPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6758908630493490176</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/baseURI/documentwrite]]></path>
    <location><![CDATA[/address/baseURI/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.baseURI</b> and passed to <b>document.write</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvYmFzZVVSSS9kb2N1bWVudHdyaXRlIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNmYyOTFlNzU1MjJmZTFkYzliNjQ1MDgwOTliYTdjMGQNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNzoxMSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTc3DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IGRvY3VtZW50LmJhc2VVUkk7CmRvY3VtZW50LndyaXRlKHBheWxvYWQpOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>document.baseURI</source>
      <sink>document.write</sink>
      <sourceStackTrace>at Object.raiUj (&lt;anonymous&gt;:1:336277)
at Object.UltTL (&lt;anonymous&gt;:1:753808)
at HTMLDocument.get [as baseURI] (&lt;anonymous&gt;:1:756007)
at http://public-firing-range.appspot.com/address/baseURI/documentwrite:5:30</sourceStackTrace>
      <sinkStackTrace>at Object.FnhFr (&lt;anonymous&gt;:1:854428)
at HTMLDocument.write (&lt;anonymous&gt;:1:855304)
at http://public-firing-range.appspot.com/address/baseURI/documentwrite:6:10</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/baseURI/documentwrite?d27ft4vmjj=d27ft4vmjj%27%22`&apos;&quot;/d27ft4vmjj/&gt;&lt;d27ft4vmjj/\&gt;rauh20c41v&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/baseURI/documentwrite?d27ft4vmjj=d27ft4vmjj%27%22`&apos;&quot;/d27ft4vmjj/&gt;&lt;d27ft4vmjj/\&gt;rauh20c41v&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/baseURI/documentwrite?&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>617938244006729728</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/baseURI/documentwrite]]></path>
    <location><![CDATA[/address/baseURI/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2Jhc2VVUkkvZG9jdW1lbnR3cml0ZT90bUNIPTEwMTk1MDg3MDUgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCm0yd2R5PXgmbjZ6d249eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBiOTU2ZGM5Y2JmOWU0YmFjMDljYzMzZTAwMDVmYjViMQ0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjI3OjEyIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2Jhc2VVUkkvZG9jdW1lbnR3cml0ZT8yRmc4PTgxNTg0NDc2MyBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KZHM1c2w9eCZ2MWY1Nj14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1346071701356677120</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/documentURI/documentwrite]]></path>
    <location><![CDATA[/address/documentURI/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>document.documentURI</b> and passed to <b>document.write</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvZG9jdW1lbnRVUkkvZG9jdW1lbnR3cml0ZSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNzRjNmJjNzJlZmQ1OTg2YzA1YTZmNzRmOGM0NDcwZTMNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNzoxMCBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTgxDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IGRvY3VtZW50LmRvY3VtZW50VVJJOwpkb2N1bWVudC53cml0ZShwYXlsb2FkKTsKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>document.documentURI</source>
      <sink>document.write</sink>
      <sourceStackTrace>at Object.raiUj (&lt;anonymous&gt;:1:336277)
at Object.UltTL (&lt;anonymous&gt;:1:753808)
at HTMLDocument.get [as documentURI] (&lt;anonymous&gt;:1:756007)
at http://public-firing-range.appspot.com/address/documentURI/documentwrite:5:30</sourceStackTrace>
      <sinkStackTrace>at Object.FnhFr (&lt;anonymous&gt;:1:854428)
at HTMLDocument.write (&lt;anonymous&gt;:1:855304)
at http://public-firing-range.appspot.com/address/documentURI/documentwrite:6:10</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/documentURI/documentwrite?wojupb1hlf=wojupb1hlf%27%22`&apos;&quot;/wojupb1hlf/&gt;&lt;wojupb1hlf/\&gt;qbn2dn2das&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/documentURI/documentwrite?wojupb1hlf=wojupb1hlf%27%22`&apos;&quot;/wojupb1hlf/&gt;&lt;wojupb1hlf/\&gt;qbn2dn2das&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/documentURI/documentwrite?&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>4226408930049113088</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/documentURI/documentwrite]]></path>
    <location><![CDATA[/address/documentURI/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2RvY3VtZW50VVJJL2RvY3VtZW50d3JpdGU/UjhPTT03NzkzODg5NDUgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCjZ4b3Y4PXgmMHdsYXE9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiAzNjVjNWY1OWMzNTQyYmMwZDA5YjYzZTQ3MzZiYTBhOQ0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDEyOjEwOjQyIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2RvY3VtZW50VVJJL2RvY3VtZW50d3JpdGU/SE9yej0xNDY4MzQ2NzQzIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQp6YTNqcz14Jmoxc3ptPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5744503650909682688</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/assign]]></path>
    <location><![CDATA[/address/location/assign]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2Fzc2lnbj9TUE53PTIwNjU1MzAwMzkgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCm9xOG9qPXgmeWR0bmc9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA3OTcxYjAzOWQ0NzY0ODFiZDE0MjJlMjhjY2RlYzVkNg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjQwOjIzIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkNvbnRlbnQtTGVuZ3RoOiAyNjYNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjxodG1sPjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDtjaGFyc2V0PXV0Zi04Ij4KPHRpdGxlPjQwNSBIVFRQIG1ldGhvZCBQT1NUIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBVUkw8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5IHRleHQ9IzAwMDAwMCBiZ2NvbG9yPSNmZmZmZmY+CjxoMT5FcnJvcjogSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC9oMT4KPC9ib2R5PjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2Fzc2lnbj90TEpzPTU3NTA4NDk0MSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KYmJwNGQ9eCZjajRyND14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9219849374638010368</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/documentwrite]]></path>
    <location><![CDATA[/address/location/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location</b> and passed to <b>document.write</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24vZG9jdW1lbnR3cml0ZSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogM2UyNDYzODY2MmNkOTIyODEzODM1NWIzMjg1ZDU5NjINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo1MSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTc2DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbjsKZG9jdW1lbnQud3JpdGUocGF5bG9hZCk7CgogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location</source>
      <sink>document.write</sink>
      <sourceStackTrace>at Object.pjIlz (&lt;anonymous&gt;:1:788463)
at Object.nEQGs (&lt;anonymous&gt;:1:791069)
at Object.toString (&lt;anonymous&gt;:1:794188)
at HTMLDocument.write (&lt;anonymous&gt;:1:855126)
at http://public-firing-range.appspot.com/address/location/documentwrite:6:10</sourceStackTrace>
      <sinkStackTrace>at Object.FnhFr (&lt;anonymous&gt;:1:854428)
at HTMLDocument.write (&lt;anonymous&gt;:1:855304)
at http://public-firing-range.appspot.com/address/location/documentwrite:6:10</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/location/documentwrite?m5pi783vvi=m5pi783vvi%27%22`&apos;&quot;/m5pi783vvi/&gt;&lt;m5pi783vvi/\&gt;aysmy3hrey&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/location/documentwrite?m5pi783vvi=m5pi783vvi%27%22`&apos;&quot;/m5pi783vvi/&gt;&lt;m5pi783vvi/\&gt;aysmy3hrey&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location/documentwrite?&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>3107794352536487936</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/documentwrite]]></path>
    <location><![CDATA[/address/location/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2RvY3VtZW50d3JpdGU/UFZ2dD01ODg1MTgzOSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KM2R2NXc9eCZ0aWRjbj14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA3Y2Q1Y2U1MDIxYzg2ZDU0ZTA4MWQ2MDA5MzU1MWM3Yg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjE3OjQ3IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2RvY3VtZW50d3JpdGU/NG5zej0xMDMxMTc3MTc0IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQpwYW5saT14JmFpNG0yPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6026213651531200512</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/documentwriteln]]></path>
    <location><![CDATA[/address/location/documentwriteln]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location</b> and passed to <b>document.writeln</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24vZG9jdW1lbnR3cml0ZWxuIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNjIwMjJiZWI3OWQ2MTUyNTIzNWNlMWQ0MDI1ZTE2ZmUNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo1MyBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTc4DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbjsKZG9jdW1lbnQud3JpdGVsbihwYXlsb2FkKTsKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location</source>
      <sink>document.writeln</sink>
      <sourceStackTrace>at Object.pjIlz (&lt;anonymous&gt;:1:788463)
at Object.nEQGs (&lt;anonymous&gt;:1:791069)
at Object.toString (&lt;anonymous&gt;:1:794188)
at HTMLDocument.writeln (&lt;anonymous&gt;:1:856487)
at http://public-firing-range.appspot.com/address/location/documentwriteln:6:10</sourceStackTrace>
      <sinkStackTrace>at Object.DpbwK (&lt;anonymous&gt;:1:348810)
at Object.eFDKx (&lt;anonymous&gt;:1:814879)
at HTMLDocument.writeln (&lt;anonymous&gt;:1:856588)
at http://public-firing-range.appspot.com/address/location/documentwriteln:6:10</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/location/documentwriteln?otfqjy16yp=otfqjy16yp%27%22`&apos;&quot;/otfqjy16yp/&gt;&lt;otfqjy16yp/\&gt;in74q73z9d&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/location/documentwriteln?otfqjy16yp=otfqjy16yp%27%22`&apos;&quot;/otfqjy16yp/&gt;&lt;otfqjy16yp/\&gt;in74q73z9d&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location/documentwriteln?&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>1753982646542864384</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/documentwriteln]]></path>
    <location><![CDATA[/address/location/documentwriteln]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2RvY3VtZW50d3JpdGVsbj9ldEFzPTQzMjgzNDYwMiBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KbDl0OGk9eCZsNTcyNT14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBlNzE5Y2ZmMjZhYTE1MWMxODg2YTQzZmY4NmVkZDNjNg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjM4OjAxIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2RvY3VtZW50d3JpdGVsbj9lOGh0PTE2MTQyMzAyMyBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KdDM2dHI9eCZzazY3dz14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2412360572109720576</serialNumber>
    <type>2097952</type>
    <name><![CDATA[JavaScript injection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/eval]]></path>
    <location><![CDATA[/address/location/eval]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>location</b> and passed to <b>eval</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24vZXZhbCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogMDMzM2QyODlhYWUwZDg4Mjg3ZWM2YTlkZGQxNmZhMjcNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo1NCBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTY3DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbjsKZXZhbChwYXlsb2FkKTsgCgogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location</source>
      <sink>eval</sink>
      <sourceStackTrace>at Object.pjIlz (&lt;anonymous&gt;:1:788463)
at Object.nEQGs (&lt;anonymous&gt;:1:791069)
at Object.toString (&lt;anonymous&gt;:1:794188)
at Object.OBNzG (&lt;anonymous&gt;:1:247671)
at _0x414cba (&lt;anonymous&gt;:1:497190)
at &lt;anonymous&gt;:1:850232
at http://public-firing-range.appspot.com/address/location/eval:6:1</sourceStackTrace>
      <sinkStackTrace>at Object.IVCCC (&lt;anonymous&gt;:1:348577)
at Object.cTEBO (&lt;anonymous&gt;:1:814122)
at &lt;anonymous&gt;:1:850281
at http://public-firing-range.appspot.com/address/location/eval:6:1</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/location/eval?nx3m8p8e2u=nx3m8p8e2u%27%22`&apos;&quot;/nx3m8p8e2u/&gt;&lt;nx3m8p8e2u/\&gt;lfuo73fv22&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/location/eval?nx3m8p8e2u=nx3m8p8e2u%27%22`&apos;&quot;/nx3m8p8e2u/&gt;&lt;nx3m8p8e2u/\&gt;lfuo73fv22&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location/eval?alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>6807389981110309888</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/eval]]></path>
    <location><![CDATA[/address/location/eval]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2V2YWw/Rm9LTz0zNzUwMTc4NzggSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCmRsaHJjPXgmdXQ2aXQ9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBhMmQ1ZTlhMjk0NzNhN2YwZjY1YTA2NTBlODdkYzM2OA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDEyOjAyOjAwIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2V2YWw/REphOD0xNDM3MzA5NjMxIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQpnbG4ycD14JjN1anowPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>9134488465655024640</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/innerHtml]]></path>
    <location><![CDATA[/address/location/innerHtml]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location</b> and passed to <b>element.innerHTML</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24vaW5uZXJIdG1sIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogMjQ3ZjAzMGJjZWEyNjUzOWQ4ODE2NTQyNGE4MGQwYzgNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo1NSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMzI3DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbjsKdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwpkaXYuaWQgPSAnZGl2RWwnOwpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZGl2KTsKCnZhciBkaXZFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXZFbCcpOwpkaXZFbC5pbm5lckhUTUwgPSBwYXlsb2FkOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location</source>
      <sink>element.innerHTML</sink>
      <sourceStackTrace>at Object.pjIlz (&lt;anonymous&gt;:1:788463)
at Object.nEQGs (&lt;anonymous&gt;:1:791069)
at Object.toString (&lt;anonymous&gt;:1:794188)
at Object.OBNzG (&lt;anonymous&gt;:1:247671)
at _0x414cba (&lt;anonymous&gt;:1:497190)
at Object.vSsLx (&lt;anonymous&gt;:1:349381)
at Object.PtaYA (&lt;anonymous&gt;:1:820650)
at Object.WVBay (&lt;anonymous&gt;:1:894922)
at HTMLDivElement.set [as innerHTML] (&lt;anonymous&gt;:1:895564)
at http://public-firing-range.appspot.com/address/location/innerHtml:11:17</sourceStackTrace>
      <sinkStackTrace>at Object.hVQfU (&lt;anonymous&gt;:1:350796)
at Object.sLKvq (&lt;anonymous&gt;:1:820757)
at Object.kJpVi (&lt;anonymous&gt;:1:895029)
at HTMLDivElement.set [as innerHTML] (&lt;anonymous&gt;:1:895619)
at http://public-firing-range.appspot.com/address/location/innerHtml:11:17</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/location/innerHtml?iwd3ay8gm9=iwd3ay8gm9%27%22`&apos;&quot;/iwd3ay8gm9/&gt;&lt;iwd3ay8gm9/\&gt;b6utpcrdo2&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/location/innerHtml?iwd3ay8gm9=iwd3ay8gm9%27%22`&apos;&quot;/iwd3ay8gm9/&gt;&lt;iwd3ay8gm9/\&gt;b6utpcrdo2&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location/innerHtml?&apos;&quot;&gt;&lt;img src=1 onerror=alert(1)&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>716511508585211904</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/innerHtml]]></path>
    <location><![CDATA[/address/location/innerHtml]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2lubmVySHRtbD9xalBoPTg4MzkzNzE2OSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KaWV2NDA9eCZiczV1dz14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA4YWQzMGQwMTdmN2ZhYTc3MzU5MWRmZGQ1OWZhOWI3MA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDEyOjAwOjA0IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2lubmVySHRtbD9xN1B5PTE0NjY3NTQ5NDEgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDI1DQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCmV3Mmt1PXgmNGQxeno9eA0KMQ0KWg0KUQ0KDQo=]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4668455515594012672</serialNumber>
    <type>2097952</type>
    <name><![CDATA[JavaScript injection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/rangeCreateContextualFragment]]></path>
    <location><![CDATA[/address/location/rangeCreateContextualFragment]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>location</b> and passed to <b>createContextualFragment</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24vcmFuZ2VDcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogZjlhODFiYjYwMTcyNDZkNzFkOTFjYmNiNGViNTFmM2YNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo1NiBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogNTQwDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbjsKdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwpkaXYuaWQgPSAnZGl2RWwnOwpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZGl2KTsKCnZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7Ci8vIG1ha2UgdGhlIHBhcmVudCBvZiB0aGUgZmlyc3QgZGl2IGluIHRoZSBkb2N1bWVudCBiZWNvbWVzIHRoZSBjb250ZXh0IG5vZGUKcmFuZ2Uuc2VsZWN0Tm9kZShkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZGl2IikuaXRlbSgwKSk7CnZhciBkb2N1bWVudEZyYWdtZW50ID0gcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHBheWxvYWQpOwpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50RnJhZ21lbnQpOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location</source>
      <sink>createContextualFragment</sink>
      <sourceStackTrace>at Object.pjIlz (&lt;anonymous&gt;:1:788463)
at Object.nEQGs (&lt;anonymous&gt;:1:791069)
at Object.toString (&lt;anonymous&gt;:1:794188)
at Object.jCTDb (&lt;anonymous&gt;:1:825023)
at Object.pYaYC (&lt;anonymous&gt;:1:825602)
at Range.createContextualFragment (&lt;anonymous&gt;:1:826226)
at http://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment:13:30</sourceStackTrace>
      <sinkStackTrace>at Object.ctMzV (&lt;anonymous&gt;:1:824839)
at Object.KqVTE (&lt;anonymous&gt;:1:825398)
at Range.createContextualFragment (&lt;anonymous&gt;:1:826093)
at http://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment:13:30</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment?yq0ymf3jrc=yq0ymf3jrc%27%22`&apos;&quot;/yq0ymf3jrc/&gt;&lt;yq0ymf3jrc/\&gt;y1gcx13a2z&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment?yq0ymf3jrc=yq0ymf3jrc%27%22`&apos;&quot;/yq0ymf3jrc/&gt;&lt;yq0ymf3jrc/\&gt;y1gcx13a2z&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location/rangeCreateContextualFragment?&apos;&quot;&gt;&lt;img src=1 onerror=alert(1)&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>2870330461772967936</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/rangeCreateContextualFragment]]></path>
    <location><![CDATA[/address/location/rangeCreateContextualFragment]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL3JhbmdlQ3JlYXRlQ29udGV4dHVhbEZyYWdtZW50PzVBejA9MTgxNTk2OTc5OSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0Kc2U2YW09eCZrbG40NT14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA3MGIxMDIzMmQwYTc4MDFlNTFlNWY2MzBmYmE0OGY3OQ0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjQxOjExIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL3JhbmdlQ3JlYXRlQ29udGV4dHVhbEZyYWdtZW50P0JQYlA9MTM5NDU2NTEwMCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KOGVpcWU9eCZ0ejZ2ND14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>6559976443764046848</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/replace]]></path>
    <location><![CDATA[/address/location/replace]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL3JlcGxhY2U/akc0Tj0xOTgwNDk0MzMyIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAzMQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQpqbHRjZD14JjE0YjYzPXgNCjENCloNClENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiAwZDMzZDFhNmQ0NWJkYzQyYzJmNmNjNzc1NzFiMGE4NQ0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjQwOjUwIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkNvbnRlbnQtTGVuZ3RoOiAyNjYNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjxodG1sPjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDtjaGFyc2V0PXV0Zi04Ij4KPHRpdGxlPjQwNSBIVFRQIG1ldGhvZCBQT1NUIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBVUkw8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5IHRleHQ9IzAwMDAwMCBiZ2NvbG9yPSNmZmZmZmY+CjxoMT5FcnJvcjogSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC9oMT4KPC9ib2R5PjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL3JlcGxhY2U/bmVrYT0xOTU5MTc3MzA5IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQo0bmoxOT14Jjc5OXl0PXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2105315240373875712</serialNumber>
    <type>2097952</type>
    <name><![CDATA[JavaScript injection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/setTimeout]]></path>
    <location><![CDATA[/address/location/setTimeout]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>location</b> and passed to <b>setTimeout</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24vc2V0VGltZW91dCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNTUwOGIxNmI1NmJlMTFiMGFhZDk0NjliNTEwYTYwYmUNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNzowOSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTg5DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbjsKc2V0VGltZW91dCgndmFyIGE9YTsnICsgcGF5bG9hZCwgMSk7IAoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location</source>
      <sink>setTimeout</sink>
      <sourceStackTrace>at Object.pjIlz (&lt;anonymous&gt;:1:788463)
at Object.nEQGs (&lt;anonymous&gt;:1:791069)
at Object.toString (&lt;anonymous&gt;:1:794188)
at http://public-firing-range.appspot.com/address/location/setTimeout:6:23</sourceStackTrace>
      <sinkStackTrace>at Object.DpbwK (&lt;anonymous&gt;:1:348810)
at Object.eFDKx (&lt;anonymous&gt;:1:814879)
at &lt;anonymous&gt;:1:863393
at http://public-firing-range.appspot.com/address/location/setTimeout:6:1</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/location/setTimeout?p92ffc6o3d=p92ffc6o3d%27%22`&apos;&quot;/p92ffc6o3d/&gt;&lt;p92ffc6o3d/\&gt;gwariofbha&amp;</sourceValue>
      <sinkValue>var a=a;http://public-firing-range.appspot.com/address/location/setTimeout?p92ffc6o3d=p92ffc6o3d%27%22`&apos;&quot;/p92ffc6o3d/&gt;&lt;p92ffc6o3d/\&gt;gwariofbha&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location/setTimeout?alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>3537793297710640128</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location/setTimeout]]></path>
    <location><![CDATA[/address/location/setTimeout]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL3NldFRpbWVvdXQ/SDA2eD0xODE1Njg4NzA4IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAzMQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQo5bTU4bT14JmFwZzFlPXgNCjENCloNClENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA1ODFhMWU2N2Y3ZDdjMGFhYWViYjgyMDEzNTllYzUxYw0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjQxOjEyIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL3NldFRpbWVvdXQ/bFFJaz0xMzYxMTA4Mzg5IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQpteDhwNT14JndlcWowPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7478403765773962240</serialNumber>
    <type>5243152</type>
    <name><![CDATA[Open redirection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/assign]]></path>
    <location><![CDATA[/address/location.hash/assign]]></location>
    <severity>Low</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based open redirection arises when a script  writes controllable data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to  construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>
<p><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.hash</b> and passed to <b>location.assign</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9hc3NpZ24gSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9hc3NpZ24NCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogMWY5N2YxOWJkZWYwNzhlNGVkN2YwNjZkZDVlNDNjODQNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjoyMyBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTk4DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTt3aW5kb3cubG9jYXRpb24uYXNzaWduKHBheWxvYWQpOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>location.assign</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/assign:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.zGfIl (&lt;anonymous&gt;:1:340985)
at Object.OcVtu (&lt;anonymous&gt;:1:788569)
at Object.iZAME (&lt;anonymous&gt;:1:791678)
at Object.assign (&lt;anonymous&gt;:1:798683)
at http://public-firing-range.appspot.com/address/location.hash/assign:5:68</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#al2e1rzz5a=al2e1rzz5a%27%22`&apos;&quot;/al2e1rzz5a/&gt;&lt;al2e1rzz5a/\&gt;td2zh968o2&amp;</sourceValue>
      <sinkValue>al2e1rzz5a=al2e1rzz5a%27%22`&apos;&quot;/al2e1rzz5a/&gt;&lt;al2e1rzz5a/\&gt;td2zh968o2&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/assign#javascript:alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>5059191541836503040</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/assign]]></path>
    <location><![CDATA[/address/location.hash/assign]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvYXNzaWduP3dIclo9MTc2ODcxNzAxNSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KZG5tNHE9eCY3NXJmMD14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA2YjcwMzQ3NjVlMWM1NjNkOTdiYjRlMzEyOTM0MTI3NA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjQwOjUzIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkNvbnRlbnQtTGVuZ3RoOiAyNjYNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjxodG1sPjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDtjaGFyc2V0PXV0Zi04Ij4KPHRpdGxlPjQwNSBIVFRQIG1ldGhvZCBQT1NUIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBVUkw8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5IHRleHQ9IzAwMDAwMCBiZ2NvbG9yPSNmZmZmZmY+CjxoMT5FcnJvcjogSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC9oMT4KPC9ib2R5PjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvYXNzaWduPzFGMnk9MjI3NjQzNjY0IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQpha3ZxbD14JjgzZmVpPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>4920125073533444096</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/documentwrite]]></path>
    <location><![CDATA[/address/location.hash/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.hash</b> and passed to <b>document.write</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9kb2N1bWVudHdyaXRlIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogN2UyNWM5NDIxOTRiZWIwYzUxNzdiZmU5NDE0OWM3OGYNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjoyNCBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTkwDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTtkb2N1bWVudC53cml0ZShwYXlsb2FkKTsKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>document.write</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/documentwrite:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.FnhFr (&lt;anonymous&gt;:1:854428)
at HTMLDocument.write (&lt;anonymous&gt;:1:855304)
at http://public-firing-range.appspot.com/address/location.hash/documentwrite:5:61</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#xpvrrgqyvx=xpvrrgqyvx%27%22`&apos;&quot;/xpvrrgqyvx/&gt;&lt;xpvrrgqyvx/\&gt;na8nn7qwrv&amp;</sourceValue>
      <sinkValue>xpvrrgqyvx=xpvrrgqyvx%27%22`&apos;&quot;/xpvrrgqyvx/&gt;&lt;xpvrrgqyvx/\&gt;na8nn7qwrv&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/documentwrite#&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>2630883534666822656</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/documentwrite]]></path>
    <location><![CDATA[/address/location.hash/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZG9jdW1lbnR3cml0ZT9ScUR6PTYyMzYzMDY5OCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KaWpqaG09eCYwcDB4MD14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA4NWYxOTZmNTdlYmJiMWY2NzJjYjFhYWY0MjRkYWE2NA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjQ5OjIwIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZG9jdW1lbnR3cml0ZT94dlJwPTE5NjY4NTM3NjggSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDI1DQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCnc3Y2R1PXgmYmc3ajE9eA0KMQ0KWg0KUQ0KDQo=]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2741107769089223680</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/documentwriteln]]></path>
    <location><![CDATA[/address/location.hash/documentwriteln]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.hash</b> and passed to <b>document.writeln</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9kb2N1bWVudHdyaXRlbG4gSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogMjU2MTdlZmZmMTkzNmM1OWYzMGE0NzQ5ZTBiNTk5NTQNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjoyNiBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTkyDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTtkb2N1bWVudC53cml0ZWxuKHBheWxvYWQpOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>document.writeln</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/documentwriteln:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.DpbwK (&lt;anonymous&gt;:1:348810)
at Object.eFDKx (&lt;anonymous&gt;:1:814879)
at HTMLDocument.writeln (&lt;anonymous&gt;:1:856588)
at http://public-firing-range.appspot.com/address/location.hash/documentwriteln:5:61</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#xo7q3g971w=xo7q3g971w%27%22`&apos;&quot;/xo7q3g971w/&gt;&lt;xo7q3g971w/\&gt;wjgpnhw04a&amp;</sourceValue>
      <sinkValue>xo7q3g971w=xo7q3g971w%27%22`&apos;&quot;/xo7q3g971w/&gt;&lt;xo7q3g971w/\&gt;wjgpnhw04a&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/documentwriteln#&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>3727944850801468416</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/documentwriteln]]></path>
    <location><![CDATA[/address/location.hash/documentwriteln]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZG9jdW1lbnR3cml0ZWxuP0hHQ2I9MTgwOTc5MTUwNCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0Kc2hteDk9eCZ5djl4aT14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBiMTgxOTQ2NGI5YTQxYTE5ZDJhN2NmODc2OWM2YmMwMw0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjMzOjAzIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZG9jdW1lbnR3cml0ZWxuP2NjT3o9MTQ0NDE4MjM5MiBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KMG9rdHE9eCZ1ZTN6bT14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>969462775986316288</serialNumber>
    <type>2097952</type>
    <name><![CDATA[JavaScript injection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/eval]]></path>
    <location><![CDATA[/address/location.hash/eval]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>location.hash</b> and passed to <b>eval</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9ldmFsIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNGYzNzYwMWU4Y2IwMGIyNmE3NTIwOGYwMjc0Y2Q5ZjYNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjoyNyBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTgxDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTtldmFsKHBheWxvYWQpOyAKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>eval</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/eval:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.IVCCC (&lt;anonymous&gt;:1:348577)
at Object.cTEBO (&lt;anonymous&gt;:1:814122)
at &lt;anonymous&gt;:1:850281
at http://public-firing-range.appspot.com/address/location.hash/eval:5:52</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#ewqnorkvhc=ewqnorkvhc%27%22`&apos;&quot;/ewqnorkvhc/&gt;&lt;ewqnorkvhc/\&gt;ieb0ay68qc&amp;</sourceValue>
      <sinkValue>ewqnorkvhc=ewqnorkvhc%27%22`&apos;&quot;/ewqnorkvhc/&gt;&lt;ewqnorkvhc/\&gt;ieb0ay68qc&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/eval#alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>3798905470738277376</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/eval]]></path>
    <location><![CDATA[/address/location.hash/eval]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZXZhbD92QzhyPTIwMDk2OTU2ODMgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCnZydGh0PXgmbXpncmw9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA1M2Q1YTk5NWEyYjIxYTFhZGEyYjMzZDA4NDU4NTRkNA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDEyOjA1OjMwIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZXZhbD8zeWp4PTY0MjI2MTY0MiBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KdjFlZGg9eCZ3aTl5ej14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8237083426282944512</serialNumber>
    <type>5247488</type>
    <name><![CDATA[DOM data manipulation (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/formaction]]></path>
    <location><![CDATA[/address/location.hash/formaction]]></location>
    <severity>Information</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM data manipulation arises when a script writes controllable data to a field within the DOM that is used within the visible UI or client-side application logic. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the appearance or behavior of the client-side UI. An attacker may be able to leverage this to perform virtual defacement of the application, or possibly to induce the user to perform unintended actions. </p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based DOM data manipulation vulnerabilities is not to dynamically write to DOM data fields any data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from being stored. In general, this is best achieved by using a whitelist of permitted values.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based DOM data manipulation. Data is read from <b>location.hash</b> and passed to <b>element.setAttribute.action</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9mb3JtYWN0aW9uIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogZGVmMzg5YjNjZDJmYmU3OGZiYTY5ZTM2NGU4YWNmOTANClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo0NSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMzQyDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTt2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTsKZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjdGlvbicsIHBheWxvYWQpOwpmb3JtLmlubmVySFRNTCA9ICc8aW5wdXQgdHlwZT1cJ3N1Ym1pdFwnPjwvaW5wdXQ+JzsKZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGZvcm0pOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>element.setAttribute.action</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/formaction:5:37</sourceStackTrace>
      <sinkStackTrace>at _0x2fddda (&lt;anonymous&gt;:1:889459)
at HTMLFormElement.setAttribute (&lt;anonymous&gt;:1:891157)
at http://public-firing-range.appspot.com/address/location.hash/formaction:6:6</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#qna8mfpiov=qna8mfpiov%27%22`&apos;&quot;/qna8mfpiov/&gt;&lt;qna8mfpiov/\&gt;xwsbnnkvx3&amp;</sourceValue>
      <sinkValue>qna8mfpiov=qna8mfpiov%27%22`&apos;&quot;/qna8mfpiov/&gt;&lt;qna8mfpiov/\&gt;xwsbnnkvx3&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/formaction#javascript:alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>4487711679091208192</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/formaction]]></path>
    <location><![CDATA[/address/location.hash/formaction]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZm9ybWFjdGlvbj9qVFdnPTE4MDUzODI0MzAgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCmVrb3YyPXgmeWlrZHY9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiAwZGUxZTkyYTJmNjQxYjlhZGI1NDBmOTVlMzdjOWY4Nw0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjMwOjU2IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZm9ybWFjdGlvbj82ejRrPTQ4NDI0NzA4MSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KaGpxMmc9eCZsang5Mz14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>5428402661896911872</serialNumber>
    <type>2097952</type>
    <name><![CDATA[JavaScript injection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/function]]></path>
    <location><![CDATA[/address/location.hash/function]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>location.hash</b> and passed to <b>Function</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9mdW5jdGlvbiBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogYzM4NWQyYWRmNDJmOGJkMzY5MGU4ZjFlYTdmMGZhYjINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjozOSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMjAwDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTt2YXIgZiA9IG5ldyBGdW5jdGlvbihwYXlsb2FkKTsKZigpOwogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>Function</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/function:5:37</sourceStackTrace>
      <sinkStackTrace>at new _0x5ca44c (&lt;anonymous&gt;:1:862752)
at http://public-firing-range.appspot.com/address/location.hash/function:5:60</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#mpyxh0mbss=mpyxh0mbss%27%22`&apos;&quot;/mpyxh0mbss/&gt;&lt;mpyxh0mbss/\&gt;pch0imm79j&amp;</sourceValue>
      <sinkValue>mpyxh0mbss=mpyxh0mbss%27%22`&apos;&quot;/mpyxh0mbss/&gt;&lt;mpyxh0mbss/\&gt;pch0imm79j&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/function#alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>6992489451216439296</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/function]]></path>
    <location><![CDATA[/address/location.hash/function]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZnVuY3Rpb24/Q2pTaD0yMjc4ODY5NDQgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCnQ0cDJyPXgmbzcyYXk9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiAwNzU4YTkyZjBhMWE4MTllMzcwOTk1NTRmYjAxN2MwOA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjU5OjU3IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvZnVuY3Rpb24/cFpCVT0xOTcxMzgzNzMzIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQp4em5kaz14JmphNTYyPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1627401273656522752</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/inlineevent]]></path>
    <location><![CDATA[/address/location.hash/inlineevent]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvaW5saW5lZXZlbnQ/ZXFCMT04OTMyODQ4ODcgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCnltZ2w2PXgmbmh5ZTA9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiAzOTk2ODU1YjgyMGRlNzk2MTBiYWM3NzA5YmUxYjhhNA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjU4OjQ3IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvaW5saW5lZXZlbnQ/T0lnej0xNDM0NjE0NjE5IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQo4NjlzeD14JnQ0cHZlPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7136851066608477184</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/innerHtml]]></path>
    <location><![CDATA[/address/location.hash/innerHtml]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.hash</b> and passed to <b>element.innerHTML</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9pbm5lckh0bWwgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogMjVjODFjNGJmNTUyYTg0YWJlMTlkYmMyNDkyMWZmOGQ7bz0xDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkRhdGU6IFdlZCwgMjUgTm92IDIwMjAgMTE6MDY6MjkgR01UDQpTZXJ2ZXI6IEdvb2dsZSBGcm9udGVuZA0KQ29udGVudC1MZW5ndGg6IDM0MQ0KQ29ubmVjdGlvbjogY2xvc2UNCg0KPGh0bWw+CiAgPGhlYWQ+PHRpdGxlPkFkZHJlc3MgYmFzZWQgRE9NIFhTUzwvdGl0bGU+PC9oZWFkPgogIDxib2R5PgogICAgPHNjcmlwdD4KICAgICAgdmFyIHBheWxvYWQgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSk7dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwpkaXYuaWQgPSAnZGl2RWwnOwpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZGl2KTsKCnZhciBkaXZFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXZFbCcpOwpkaXZFbC5pbm5lckhUTUwgPSBwYXlsb2FkOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>element.innerHTML</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/innerHtml:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.hVQfU (&lt;anonymous&gt;:1:350796)
at Object.sLKvq (&lt;anonymous&gt;:1:820757)
at Object.kJpVi (&lt;anonymous&gt;:1:895029)
at HTMLDivElement.set [as innerHTML] (&lt;anonymous&gt;:1:895619)
at http://public-firing-range.appspot.com/address/location.hash/innerHtml:10:17</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#h0qpteibr2=h0qpteibr2%27%22`&apos;&quot;/h0qpteibr2/&gt;&lt;h0qpteibr2/\&gt;klawgz9cvz&amp;</sourceValue>
      <sinkValue>h0qpteibr2=h0qpteibr2%27%22`&apos;&quot;/h0qpteibr2/&gt;&lt;h0qpteibr2/\&gt;klawgz9cvz&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/innerHtml#&apos;&quot;&gt;&lt;img src=1 onerror=alert(1)&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>2465211818217059328</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/innerHtml]]></path>
    <location><![CDATA[/address/location.hash/innerHtml]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvaW5uZXJIdG1sPzQwRjM9MTA4MDc5MzY5MyBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KbWs2ZXI9eCY1MzdkNT14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBkZmM3ZWNiMzRjNDRiNmE1NDAzNGNjNWU0YmNkMDkzYg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjE5OjA5IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvaW5uZXJIdG1sP0pLODM9MjM0Nzc0ODM4IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQpuMnc2cD14JjE4bXhiPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1112560682839526400</serialNumber>
    <type>5246976</type>
    <name><![CDATA[Link manipulation (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/jshref]]></path>
    <location><![CDATA[/address/location.hash/jshref]]></location>
    <severity>Low</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based link manipulation  arises when a script writes controllable data to a navigation target within the current page, such as a clickable link or the submission URL of a form. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will modify the target of links within the response. An attacker may be able to leverage this to perform various attacks, including:</p>
<ul>
<li>Causing the user to redirect to an arbitrary external URL, to facilitate a phishing attack.</li><li>Causing the user to submit sensitive form data to a server controlled by the attacker.</li><li>Causing the user to perform an unintended action within the application, by changing the file or query string associated with a link.</li><li>Bypassing browser anti-XSS defenses by injecting on-site links containing XSS exploits, since browser anti-XSS defenses typically do not operate on on-site links.</li></ul>
<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based link manipulation vulnerabilities is not to dynamically set the target URLs of links or forms using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a link target. In general, this is best achieved by using a whitelist of URLs that are permitted link targets, and strictly validating the target against this list before setting the link target.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based link manipulation. Data is read from <b>location.hash</b> and passed to <b>element.setAttribute.href</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9qc2hyZWYgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogZmI5MzJmY2QxZmE4NTk1NGYyNzRjNmVmOWM5YTQ1NDENClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo0MiBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMjc2DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTt2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBwYXlsb2FkKTsKZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGEpOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>element.setAttribute.href</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/jshref:5:37</sourceStackTrace>
      <sinkStackTrace>at _0x2fddda (&lt;anonymous&gt;:1:889459)
at HTMLAnchorElement.setAttribute (&lt;anonymous&gt;:1:891157)
at http://public-firing-range.appspot.com/address/location.hash/jshref:6:3</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#n3sje1lldj=n3sje1lldj%27%22`&apos;&quot;/n3sje1lldj/&gt;&lt;n3sje1lldj/\&gt;qgb1bs8tvq&amp;</sourceValue>
      <sinkValue>n3sje1lldj=n3sje1lldj%27%22`&apos;&quot;/n3sje1lldj/&gt;&lt;n3sje1lldj/\&gt;qgb1bs8tvq&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/jshref#javascript:alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>978155057501534208</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/jshref]]></path>
    <location><![CDATA[/address/location.hash/jshref]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvanNocmVmPzNyd2w9MjAxNTk1MzkyOSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KODJ3czk9eCZ2bzJmNT14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA1NTg3ODE2NzU3NGQ5NjlhMDUyMGRiY2NjMTFjNWFlZA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjIxOjA1IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvanNocmVmPzFibDQ9MzcyNTQyMDkzIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQozY2J1cT14JjIxaHg4PXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>7173040911113472000</serialNumber>
    <type>2097952</type>
    <name><![CDATA[JavaScript injection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/onclickAddEventListener]]></path>
    <location><![CDATA[/address/location.hash/onclickAddEventListener]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>location.hash</b> and passed to <b>Function</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9vbmNsaWNrQWRkRXZlbnRMaXN0ZW5lciBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogMDQwZjc3NTdhZjFlMTI0ZTU0NTQyZDk5ZTkwZTdkNjcNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo0MSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMzA5DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTt2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CmRpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5ldyBGdW5jdGlvbihwYXlsb2FkKSwgZmFsc2UpOwpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZGl2KTsKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>Function</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener:5:37</sourceStackTrace>
      <sinkStackTrace>at new _0x5ca44c (&lt;anonymous&gt;:1:862752)
at http://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener:6:31</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#fsay6ysfmc=fsay6ysfmc%27%22`&apos;&quot;/fsay6ysfmc/&gt;&lt;fsay6ysfmc/\&gt;v9u5rz5xtf&amp;</sourceValue>
      <sinkValue>fsay6ysfmc=fsay6ysfmc%27%22`&apos;&quot;/fsay6ysfmc/&gt;&lt;fsay6ysfmc/\&gt;v9u5rz5xtf&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/onclickAddEventListener#alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>2988860831859294208</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/onclickAddEventListener]]></path>
    <location><![CDATA[/address/location.hash/onclickAddEventListener]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvb25jbGlja0FkZEV2ZW50TGlzdGVuZXI/MjN3Sz04NDUxMjU3MCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0Kcjd5dno9eCZxeDB1aj14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBhNGVhNDQ1M2FlNzI1YjhmNjc0OGY3ODEwZGE5MTY0ZA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjQ5OjE3IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvb25jbGlja0FkZEV2ZW50TGlzdGVuZXI/M3JmWj05OTQxMjkzNjkgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDI1DQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCmEzaGNiPXgmanliZW49eA0KMQ0KWg0KUQ0KDQo=]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>8462172649103224832</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/onclickSetAttribute]]></path>
    <location><![CDATA[/address/location.hash/onclickSetAttribute]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.hash</b> and passed to <b>element.setAttribute.onclick</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9vbmNsaWNrU2V0QXR0cmlidXRlIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogYzk3NDQ2M2ZiNDk2OGNmNTk1NWIxZjZhMzYwYTFiZmQNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo0MCBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMjg2DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTt2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CmRpdi5zZXRBdHRyaWJ1dGUoJ29uY2xpY2snLCBwYXlsb2FkKTsKZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGRpdik7CiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>element.setAttribute.onclick</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.qalBt (&lt;anonymous&gt;:1:345396)
at _0x2fddda (&lt;anonymous&gt;:1:890283)
at HTMLDivElement.setAttribute (&lt;anonymous&gt;:1:891157)
at http://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute:6:5</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#zixviiwy3i=zixviiwy3i%27%22`&apos;&quot;/zixviiwy3i/&gt;&lt;zixviiwy3i/\&gt;lsci17fiux&amp;</sourceValue>
      <sinkValue>zixviiwy3i=zixviiwy3i%27%22`&apos;&quot;/zixviiwy3i/&gt;&lt;zixviiwy3i/\&gt;lsci17fiux&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/onclickSetAttribute#alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>4515938572229127168</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/onclickSetAttribute]]></path>
    <location><![CDATA[/address/location.hash/onclickSetAttribute]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvb25jbGlja1NldEF0dHJpYnV0ZT9Mc251PTkxODY3NTA3OSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KcmtpcGk9eCZtZzhzbj14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBjMjkwMDIxNTZiODk5NDAyZDY0YTJkMTNlODdlOWM4Mg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjIyOjI1IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvb25jbGlja1NldEF0dHJpYnV0ZT9kUjRxPTIxMTU0MjgyNTYgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDI1DQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCm42ODZtPXgmc2FuYzM9eA0KMQ0KWg0KUQ0KDQo=]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2508901005445926912</serialNumber>
    <type>2097952</type>
    <name><![CDATA[JavaScript injection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/rangeCreateContextualFragment]]></path>
    <location><![CDATA[/address/location.hash/rangeCreateContextualFragment]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>location.hash</b> and passed to <b>createContextualFragment</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9yYW5nZUNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNjQ3MWZhYzhlYzhmYjNlZGE5NTRhYzFkMjQzZTZiMTINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjozMCBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogNTU0DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTt2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CmRpdi5pZCA9ICdkaXZFbCc7CmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChkaXYpOwoKdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsKLy8gbWFrZSB0aGUgcGFyZW50IG9mIHRoZSBmaXJzdCBkaXYgaW4gdGhlIGRvY3VtZW50IGJlY29tZXMgdGhlIGNvbnRleHQgbm9kZQpyYW5nZS5zZWxlY3ROb2RlKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJkaXYiKS5pdGVtKDApKTsKdmFyIGRvY3VtZW50RnJhZ21lbnQgPSByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQocGF5bG9hZCk7CmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnRGcmFnbWVudCk7CgogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>createContextualFragment</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.ctMzV (&lt;anonymous&gt;:1:824839)
at Object.KqVTE (&lt;anonymous&gt;:1:825398)
at Range.createContextualFragment (&lt;anonymous&gt;:1:826093)
at http://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment:12:30</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#uugmtiz4rm=uugmtiz4rm%27%22`&apos;&quot;/uugmtiz4rm/&gt;&lt;uugmtiz4rm/\&gt;fbuq1pv4ze&amp;</sourceValue>
      <sinkValue>uugmtiz4rm=uugmtiz4rm%27%22`&apos;&quot;/uugmtiz4rm/&gt;&lt;uugmtiz4rm/\&gt;fbuq1pv4ze&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/rangeCreateContextualFragment#&apos;&quot;&gt;&lt;img src=1 onerror=alert(1)&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>7896356385121448960</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/rangeCreateContextualFragment]]></path>
    <location><![CDATA[/address/location.hash/rangeCreateContextualFragment]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvcmFuZ2VDcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQ/R01uZD02NjU5NjQwNzUgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCm1oazFlPXgmbHloMTA9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA3MDdmNTJkODY3YTNhYjFlODQyODU3Zjc0NmJkOWQ0MA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjUxOjE0IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvcmFuZ2VDcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQ/a2FLRT0xMjg3OTE3OTE3IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQo1OTUyej14JnR2d3gzPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3982333483879088128</serialNumber>
    <type>5243152</type>
    <name><![CDATA[Open redirection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/replace]]></path>
    <location><![CDATA[/address/location.hash/replace]]></location>
    <severity>Low</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based open redirection arises when a script  writes controllable data into the target of a redirection in an unsafe way. An attacker may be able to use the vulnerability to  construct a URL that, if visited by another application user, will cause a redirection to an arbitrary external domain. This behavior can be leveraged to facilitate phishing attacks against users of the application. The ability to use an authentic application URL, targeting the correct domain and with a valid SSL certificate (if SSL is used), lends credibility to the phishing attack because many users, even if they verify these features, will not notice the subsequent redirection to a different domain.</p>
<p><b>Note:</b> If an attacker is able to control the start of the string that is passed to the redirection API, then it may be possible to escalate this vulnerability into a JavaScript injection attack, by using a URL with the javascript: pseudo-protocol to execute arbitrary script code when the URL is processed by the browser.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based open redirection vulnerabilities is not to dynamically set redirection targets using data that originated from any untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing an arbitrary URL as a redirection target. In general, this is best achieved by using a whitelist of URLs that are permitted redirection targets, and strictly validating the target against this list before performing the redirection.</p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based open redirection. Data is read from <b>location.hash</b> and passed to <b>location.replace</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9yZXBsYWNlIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvcmVwbGFjZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogYjViNTBjNjYyOWU1NjkyMDEzMmE4Mzc0MWVmYjcwZGENClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjozNyBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTkzDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTtsb2NhdGlvbi5yZXBsYWNlKHBheWxvYWQpOyAKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>location.replace</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/replace:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.replace (&lt;anonymous&gt;:1:798507)
at http://public-firing-range.appspot.com/address/location.hash/replace:5:61</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#rek4m0bxtz=rek4m0bxtz%27%22`&apos;&quot;/rek4m0bxtz/&gt;&lt;rek4m0bxtz/\&gt;y2f1gd8fon&amp;</sourceValue>
      <sinkValue>rek4m0bxtz=rek4m0bxtz%27%22`&apos;&quot;/rek4m0bxtz/&gt;&lt;rek4m0bxtz/\&gt;y2f1gd8fon&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/replace#javascript:alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>7254239085825878016</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/replace]]></path>
    <location><![CDATA[/address/location.hash/replace]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvcmVwbGFjZT9Tb1k2PTQ5OTU2MzE2MSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMzENCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KM3h0NHo9eCZueDRtaz14DQoxDQpaDQpRDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBiZjIwOWQ1NzdiYWJiMzIxMTI5ZTZhMTlkNGJmYjViOQ0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjQwOjUxIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkNvbnRlbnQtTGVuZ3RoOiAyNjYNCkNvbm5lY3Rpb246IGNsb3NlDQoNCjxodG1sPjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDtjaGFyc2V0PXV0Zi04Ij4KPHRpdGxlPjQwNSBIVFRQIG1ldGhvZCBQT1NUIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBVUkw8L3RpdGxlPgo8L2hlYWQ+Cjxib2R5IHRleHQ9IzAwMDAwMCBiZ2NvbG9yPSNmZmZmZmY+CjxoMT5FcnJvcjogSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC9oMT4KPC9ib2R5PjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvcmVwbGFjZT9sOEwxPTIwOTkzNDQxMTEgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDI1DQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCnBpdnlxPXgmZWsxbjk9eA0KMQ0KWg0KUQ0KDQo=]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3922592583275575296</serialNumber>
    <type>2097952</type>
    <name><![CDATA[JavaScript injection (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/setTimeout]]></path>
    <location><![CDATA[/address/location.hash/setTimeout]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>

<p>DOM-based JavaScript injection arises when a script executes controllable data as JavaScript. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based JavaScript injection vulnerabilities is not to execute as JavaScript any data that originated from an untrusted source. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from executing as script. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and may need to involve a combination of JavaScript escaping and HTML encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based JavaScript injection. Data is read from <b>location.hash</b> and passed to <b>setTimeout</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9zZXRUaW1lb3V0IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogZDhkZGVkZjc0M2I1ZjNmMGYwOTJjNTczODE1OWU1ZGUNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjozNyBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMjAzDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTtzZXRUaW1lb3V0KCd2YXIgYT1hOycgKyBwYXlsb2FkLCAxKTsgCgogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.hash</source>
      <sink>setTimeout</sink>
      <sourceStackTrace>at Object.get hash [as hash] (&lt;anonymous&gt;:1:800071)
at http://public-firing-range.appspot.com/address/location.hash/setTimeout:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.DpbwK (&lt;anonymous&gt;:1:348810)
at Object.eFDKx (&lt;anonymous&gt;:1:814879)
at &lt;anonymous&gt;:1:863393
at http://public-firing-range.appspot.com/address/location.hash/setTimeout:5:52</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>#ui130qclhp=ui130qclhp%27%22`&apos;&quot;/ui130qclhp/&gt;&lt;ui130qclhp/\&gt;b1obo3cfzh&amp;</sourceValue>
      <sinkValue>var a=a;ui130qclhp=ui130qclhp%27%22`&apos;&quot;/ui130qclhp/&gt;&lt;ui130qclhp/\&gt;b1obo3cfzh&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/location.hash/setTimeout#alert(1)</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>2492544020023512064</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/location.hash/setTimeout]]></path>
    <location><![CDATA[/address/location.hash/setTimeout]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvc2V0VGltZW91dD9sdVpNPTE0MTY1MjM3MjEgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCnA0OW0zPXgma2JqemQ9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBlYjAzMTI2NzFjNDExMjVhYzg1MzVkMWYzOTczMzM2Zg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjUyOjE0IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvc2V0VGltZW91dD9TRUNXPTEzMDU3ODc2MTEgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDI1DQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCnhnZTRhPXgmaDB5a3o9eA0KMQ0KWg0KUQ0KDQo=]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>1633129331439987712</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/locationhref/documentwrite]]></path>
    <location><![CDATA[/address/locationhref/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.href</b> and passed to <b>document.write</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb25ocmVmL2RvY3VtZW50d3JpdGUgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNTliZGJiYTQxNjRlMDExZmIzYWI2MzcyZTc2ZjI5OWINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNzoxMiBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTgxDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwpkb2N1bWVudC53cml0ZShwYXlsb2FkKTsKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.href</source>
      <sink>document.write</sink>
      <sourceStackTrace>at Object.get href [as href] (&lt;anonymous&gt;:1:800235)
at http://public-firing-range.appspot.com/address/locationhref/documentwrite:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.FnhFr (&lt;anonymous&gt;:1:854428)
at HTMLDocument.write (&lt;anonymous&gt;:1:855304)
at http://public-firing-range.appspot.com/address/locationhref/documentwrite:6:10</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>http://public-firing-range.appspot.com/address/locationhref/documentwrite?c8w4d8hfjj=c8w4d8hfjj%27%22`&apos;&quot;/c8w4d8hfjj/&gt;&lt;c8w4d8hfjj/\&gt;kesm6qdvgw&amp;</sourceValue>
      <sinkValue>http://public-firing-range.appspot.com/address/locationhref/documentwrite?c8w4d8hfjj=c8w4d8hfjj%27%22`&apos;&quot;/c8w4d8hfjj/&gt;&lt;c8w4d8hfjj/\&gt;kesm6qdvgw&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/locationhref/documentwrite?&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>3470242050742469632</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/locationhref/documentwrite]]></path>
    <location><![CDATA[/address/locationhref/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uaHJlZi9kb2N1bWVudHdyaXRlP0lzcjE9Mzc3OTgxNzU2IEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAzMQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQpobWg1YT14JmVtZjU0PXgNCjENCloNClENCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA3YWM4NmEzNjg1MzViN2U1YWI0NzViODRkMmViMzJhMg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDExOjE3OjAyIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uaHJlZi9kb2N1bWVudHdyaXRlP0FBMDY9MTg3MDUzNTkyNCBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQNClRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkDQpDb250ZW50LUxlbmd0aDogMjUNCkNvbm5lY3Rpb246IGtlZXAtYWxpdmUNCg0KZg0KaDJ3MmE9eCZwYnBjcj14DQoxDQpaDQpRDQoNCg==]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3996255122444584960</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/locationpathname/documentwrite]]></path>
    <location><![CDATA[/address/locationpathname/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9ucGF0aG5hbWUvZG9jdW1lbnR3cml0ZT9FcXAxPTEyMzE0ODY1NDYgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCjhhd25uPXgmN2Nhc2s9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiBlZGM0ODM5YTU5MGQwMzI5OTk0MTRhN2RjOTZlMDc5ZQ0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDEyOjAyOjMxIEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9ucGF0aG5hbWUvZG9jdW1lbnR3cml0ZT9YTU5hPTE4MTYyOTY4MTIgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDI1DQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCnFlbW13PXgmOXhweTU9eA0KMQ0KWg0KUQ0KDQo=]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>3514845601154770944</serialNumber>
    <type>2097936</type>
    <name><![CDATA[Cross-site scripting (DOM-based)]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/locationsearch/documentwrite]]></path>
    <location><![CDATA[/address/locationsearch/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Firm</confidence>
    <issueBackground><![CDATA[<p>DOM-based vulnerabilities arise when a client-side script reads data from a controllable part of the DOM (for example, the URL) and processes this data in an unsafe way.</p>
<p>DOM-based cross-site scripting arises when a script  writes controllable data into the HTML document in an unsafe way. An attacker may be able to use the vulnerability to construct a URL that, if visited by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p>
<p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p>
<p>Users can be induced to visit the attacker's crafted URL in various ways, similar to the usual attack delivery vectors for reflected cross-site scripting vulnerabilities.</p>

<p>Burp Suite automatically identifies this issue using static code analysis, which may lead to false positives that are not actually exploitable. The relevant code and execution paths should be reviewed to determine whether this vulnerability is indeed present, or whether mitigations are in place that would prevent exploitation.</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>The most effective way to avoid DOM-based cross-site scripting vulnerabilities is not to dynamically write data from any untrusted source into the HTML document. If the desired functionality of the application means that this behavior is unavoidable, then defenses must be implemented within the client-side code to prevent malicious data from introducing script code into the document. In many cases, the relevant data can be validated on a whitelist basis, to allow only content that is known to be safe. In other cases, it will be necessary to sanitize or encode the data. This can be a complex task, and depending on the context that the data is to be inserted may need to involve a combination of JavaScript escaping, HTML encoding, and URL encoding, in the appropriate sequence. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
<li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
		<li><a href="https://portswigger.net/web-security/cross-site-scripting/dom-based">DOM-based cross-site scripting</a>
	</li>

</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/80.html">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/116.html">CWE-116: Improper Encoding or Escaping of Output</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/159.html">CWE-159: Failure to Sanitize Special Element</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[The application may be vulnerable to DOM-based cross-site scripting. Data is read from <b>location.search</b> and passed to <b>document.write</b>.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb25zZWFyY2gvZG9jdW1lbnR3cml0ZSBIVFRQLzEuMQ0KSG9zdDogcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbQ0KVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0czogMQ0KUmVmZXJlcjogaHR0cDovL3B1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20vYWRkcmVzcy9pbmRleC5odG1sDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbi1HQjtxPTAuOSxlbjtxPTAuOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg1LjAuNDE4My44MyBTYWZhcmkvNTM3LjM2DQpDb25uZWN0aW9uOiBjbG9zZQ0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCg0K]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogYjIyYmFlZmQ1MDY4YWNmNzQzMWE4NjMzODQzNDJkYWYNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNzoxNCBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTkzDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpOwpkb2N1bWVudC53cml0ZShwYXlsb2FkKTsKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <dynamicAnalysis>
      <source>location.search</source>
      <sink>document.write</sink>
      <sourceStackTrace>at Object.RwPgE (&lt;anonymous&gt;:1:793178)
at Object.get search [as search] (&lt;anonymous&gt;:1:798862)
at http://public-firing-range.appspot.com/address/locationsearch/documentwrite:5:37</sourceStackTrace>
      <sinkStackTrace>at Object.FnhFr (&lt;anonymous&gt;:1:854428)
at HTMLDocument.write (&lt;anonymous&gt;:1:855304)
at http://public-firing-range.appspot.com/address/locationsearch/documentwrite:6:10</sinkStackTrace>
      <eventListenerStackTrace></eventListenerStackTrace>
      <sourceValue>?vjad9krpix=vjad9krpix%27%22`&apos;&quot;/vjad9krpix/&gt;&lt;vjad9krpix/\&gt;vtnkfv93ko&amp;</sourceValue>
      <sinkValue>vjad9krpix=vjad9krpix%27%22`&apos;&quot;/vjad9krpix/&gt;&lt;vjad9krpix/\&gt;vtnkfv93ko&amp;</sinkValue>
      <eventHandlerData></eventHandlerData>
      <eventHandlerDataType></eventHandlerDataType>
      <eventHandlerManipulatedData></eventHandlerManipulatedData>
      <poc>http://public-firing-range.appspot.com/address/locationsearch/documentwrite?&apos;&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</poc>
      <origin></origin>
      <isOriginChecked>false</isOriginChecked>
      <sourceElementId></sourceElementId>
      <sourceElementName></sourceElementName>
      <eventFiredEventName></eventFiredEventName>
      <eventFiredElementId></eventFiredElementId>
      <eventFiredElementName></eventFiredElementName>
      <eventFiredOuterHtml></eventFiredOuterHtml>
    </dynamicAnalysis>
  </issue>
  <issue>
    <serialNumber>8520621959298988032</serialNumber>
    <type>2097472</type>
    <name><![CDATA[HTTP request smuggling]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address/locationsearch/documentwrite]]></path>
    <location><![CDATA[/address/locationsearch/documentwrite]]></location>
    <severity>High</severity>
    <confidence>Tentative</confidence>
    <issueBackground><![CDATA[<p>
    HTTP request smuggling vulnerabilities arise when websites route HTTP requests through webservers with inconsistent HTTP parsing.
</p>
<p>
    By supplying a request that gets interpreted as being different lengths by different servers, an attacker can poison the back-end TCP/TLS socket and prepend arbitrary data to the next request. Depending on the website's functionality, this can be used to bypass front-end security rules, access internal systems, poison web caches, and launch assorted attacks on users who are actively browsing the site.
</p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>
    You can resolve all variants of this vulnerability by configuring the front-end server to exclusively use HTTP/2 to communicate to back-end systems, or by disabling back-end connection reuse entirely. Alternatively, you could ensure all servers in the chain run the same webserver software with the same configuration.
</p><p>
    Specific instances of this vulnerability can be resolved by reconfiguring the front-end server to normalize ambiguous requests before routing them onward, or by configuring the back-end server to reject the message and close the connection when it encounters an ambiguous request.
</p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></li>
    <li><a href="https://portswigger.net/blog/http-desync-attacks">HTTP Desync Attacks</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
    <li><a href="https://cwe.mitre.org/data/definitions/444.html">
        CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')</a></li>
</ul>]]></vulnerabilityClassifications>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uc2VhcmNoL2RvY3VtZW50d3JpdGU/OTIwWD0xMTAxNzA5OTEgSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvaW5kZXguaHRtbA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDQpUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZA0KQ29udGVudC1MZW5ndGg6IDMxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCmYNCm55Y2lxPXgmOHFseXE9eA0KMQ0KWg0KUQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOA0KWC1DbG91ZC1UcmFjZS1Db250ZXh0OiA5ZWYxMWRhM2ZhNTNkMDBjOTVjNGY5NTEwZjRjMzJmYg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpEYXRlOiBXZWQsIDI1IE5vdiAyMDIwIDEyOjA5OjI1IEdNVA0KU2VydmVyOiBHb29nbGUgRnJvbnRlbmQNCkNhY2hlLUNvbnRyb2w6IHByaXZhdGUNCkFsdC1TdmM6IGgzLTI5PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1UMDUxPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDUwPSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQ2PSI6NDQzIjsgbWE9MjU5MjAwMCxoMy1RMDQzPSI6NDQzIjsgbWE9MjU5MjAwMCxxdWljPSI6NDQzIjsgbWE9MjU5MjAwMDsgdj0iNDYsNDMiDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1MZW5ndGg6IDI2Ng0KDQo8aHRtbD48aGVhZD4KPG1ldGEgaHR0cC1lcXVpdj0iY29udGVudC10eXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCI+Cjx0aXRsZT40MDUgSFRUUCBtZXRob2QgUE9TVCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgVVJMPC90aXRsZT4KPC9oZWFkPgo8Ym9keSB0ZXh0PSMwMDAwMDAgYmdjb2xvcj0jZmZmZmZmPgo8aDE+RXJyb3I6IEhUVFAgbWV0aG9kIFBPU1QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIFVSTDwvaDE+CjwvYm9keT48L2h0bWw+Cg==]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="POST" base64="true"><![CDATA[UE9TVCBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uc2VhcmNoL2RvY3VtZW50d3JpdGU/cThUSD0xMTYwMzU1MzgzIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2luZGV4Lmh0bWwNCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZA0KVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQNCkNvbnRlbnQtTGVuZ3RoOiAyNQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KDQpmDQptcjMyMD14JmZ2dHhxPXgNCjENCloNClENCg0K]]></request>
    </requestresponse>
  </issue>
  <issue>
    <serialNumber>2040143758462761984</serialNumber>
    <type>5245360</type>
    <name><![CDATA[Browser cross-site scripting filter disabled]]></name>
    <host ip="216.58.212.148">https://public-firing-range.appspot.com</host>
    <path><![CDATA[/address]]></path>
    <location><![CDATA[/address]]></location>
    <severity>Information</severity>
    <confidence>Certain</confidence>
    <issueBackground><![CDATA[<p>Some browsers, including Internet Explorer, contain built-in filters designed to protect against cross-site scripting (XSS) attacks. Applications can instruct browsers to disable this filter by setting the following response header:</p>
<p><b>X-XSS-Protection: 0</b></p>
<p>This behavior does not in itself constitute a vulnerability; in some cases XSS filters may themselves be leveraged to perform attacks against application users. However, in typical situations XSS filters do provide basic protection for application users against some XSS vulnerabilities in applications. The presence of this header should be reviewed to establish whether it affects the application's security posture. </p>]]></issueBackground>
    <remediationBackground><![CDATA[<p>Review whether the application needs to disable XSS filters. In most cases you can gain the protection provided by XSS filters without the associated risks by using the following response header:</p>
<p><b>X-XSS-Protection: 1; mode=block</b></p>
<p>When this header is set, browsers that detect an XSS attack will simply render a blank page instead of attempting to sanitize the injected script. This behavior is considerably less likely to introduce new security issues. </p>]]></remediationBackground>
    <references><![CDATA[<ul>
    <li><a href="https://portswigger.net/web-security/cross-site-scripting">Cross-site scripting</a></li>
    <li>
        <a href="http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx">Controlling
            the XSS Filter</a></li>
</ul>]]></references>
    <vulnerabilityClassifications><![CDATA[<ul>
<li><a href="https://cwe.mitre.org/data/definitions/16.html">CWE-16: Configuration</a></li>
</ul>]]></vulnerabilityClassifications>
    <issueDetail><![CDATA[This issue was found in multiple locations under the reported path.]]></issueDetail>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24vYXNzaWduIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uL2Fzc2lnbg0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogNDAyMzIzMjgyM2I2NzNmMmE1Mzc2ZmY3NDU4YjMwNjINClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjo1MSBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTg0DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbjsKd2luZG93LmxvY2F0aW9uLmFzc2lnbihwYXlsb2FkKTsKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9hc3NpZ24gSFRUUC8xLjENCkhvc3Q6IHB1YmxpYy1maXJpbmctcmFuZ2UuYXBwc3BvdC5jb20NClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENClJlZmVyZXI6IGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9hc3NpZ24NCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuLUdCO3E9MC45LGVuO3E9MC44DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODUuMC40MTgzLjgzIFNhZmFyaS81MzcuMzYNCkNvbm5lY3Rpb246IGNsb3NlDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KDQo=]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogMWY5N2YxOWJkZWYwNzhlNGVkN2YwNjZkZDVlNDNjODQNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjoyMyBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTk4DQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTt3aW5kb3cubG9jYXRpb24uYXNzaWduKHBheWxvYWQpOwoKICAgIDwvc2NyaXB0PgogIDwvYm9keT4KPC9odG1sPgo=]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
    <requestresponse>
      <request method="GET" base64="true"><![CDATA[R0VUIGh0dHA6Ly9wdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tL2FkZHJlc3MvbG9jYXRpb24uaGFzaC9yZXBsYWNlIEhUVFAvMS4xDQpIb3N0OiBwdWJsaWMtZmlyaW5nLXJhbmdlLmFwcHNwb3QuY29tDQpVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzOiAxDQpSZWZlcmVyOiBodHRwOi8vcHVibGljLWZpcmluZy1yYW5nZS5hcHBzcG90LmNvbS9hZGRyZXNzL2xvY2F0aW9uLmhhc2gvcmVwbGFjZQ0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW4tR0I7cT0wLjksZW47cT0wLjgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84NS4wLjQxODMuODMgU2FmYXJpLzUzNy4zNg0KQ29ubmVjdGlvbjogY2xvc2UNCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQoNCg==]]></request>
      <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpYLVhTUy1Qcm90ZWN0aW9uOiAwDQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KUHJhZ21hOiBuby1jYWNoZQ0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgNClgtQ2xvdWQtVHJhY2UtQ29udGV4dDogYjViNTBjNjYyOWU1NjkyMDEzMmE4Mzc0MWVmYjcwZGENClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KRGF0ZTogV2VkLCAyNSBOb3YgMjAyMCAxMTowNjozNyBHTVQNClNlcnZlcjogR29vZ2xlIEZyb250ZW5kDQpDb250ZW50LUxlbmd0aDogMTkzDQpDb25uZWN0aW9uOiBjbG9zZQ0KDQo8aHRtbD4KICA8aGVhZD48dGl0bGU+QWRkcmVzcyBiYXNlZCBET00gWFNTPC90aXRsZT48L2hlYWQ+CiAgPGJvZHk+CiAgICA8c2NyaXB0PgogICAgICB2YXIgcGF5bG9hZCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKTtsb2NhdGlvbi5yZXBsYWNlKHBheWxvYWQpOyAKCiAgICA8L3NjcmlwdD4KICA8L2JvZHk+CjwvaHRtbD4K]]></response>
      <responseRedirected>false</responseRedirected>
    </requestresponse>
  </issue>
</issues>
